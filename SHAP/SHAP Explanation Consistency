#!/usr/bin/env python
# coding: utf-8

# In[1]:


pip install shap


# In[2]:


pip install seaborn


# In[3]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import sys
get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')


# In[4]:


df = pd.read_csv('MANI1.csv',sep=';',decimal=',')
df = df.drop('ID',axis=1)
df.head()


# In[5]:


X = df.drop('default.payment.next.month',axis=1)
Y = df['default.payment.next.month']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,random_state = 1)


# In[6]:


from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators = 100,criterion = 'entropy',random_state = 0)
rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)


# In[7]:


Instanzen = pd.read_csv('Instanzen_MANI1.csv',sep=';',decimal=',')
Instanzen = Instanzen.drop('ID',axis=1)
X_Instanzen = Instanzen.drop('default.payment.next.month',axis=1)
Y_Instanzen = Instanzen['default.payment.next.month']


# In[8]:


X_test_new = X_test.append(X_Instanzen, ignore_index=True)


# In[9]:


y_test_new = y_test.append(Y_Instanzen, ignore_index=True)


# In[10]:


y_train.replace([0,1],['No default','Default'],inplace=True)
y_test.replace([0,1],['No default','Default'],inplace=True)


# In[11]:


import shap


# In[12]:


explainer = shap.TreeExplainer(rfc)
shap_values = explainer.shap_values(X_test_new)


# In[13]:


Erklärungen = pd.DataFrame()

for i in range(75):

    Werte = shap_values[1][6000+i,:].tolist()
    Erklärungen[i+1] = Werte
    
Erklärungen


# In[14]:


Erklärungen.to_csv('Erklärungen_SHAP_MANI1_1.csv')


# In[26]:


df = pd.read_csv('MANI2.csv',sep=';',decimal=',')
df = df.drop('ID',axis=1)
df.head()


# In[27]:


X = df.drop('default.payment.next.month',axis=1)
Y = df['default.payment.next.month']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,random_state = 1)


# In[28]:


from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators = 100,criterion = 'entropy',random_state = 0)
rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)


# In[29]:


Instanzen = pd.read_csv('Instanzen_MANI2.csv',sep=';',decimal=',')
Instanzen = Instanzen.drop('ID',axis=1)
X_Instanzen = Instanzen.drop('default.payment.next.month',axis=1)
Y_Instanzen = Instanzen['default.payment.next.month']


# In[30]:


X_test_new = X_test.append(X_Instanzen, ignore_index=True)


# In[31]:


y_test_new = y_test.append(Y_Instanzen, ignore_index=True)


# In[32]:


y_train.replace([0,1],['No default','Default'],inplace=True)
y_test.replace([0,1],['No default','Default'],inplace=True)


# In[33]:


import shap


# In[34]:


explainer = shap.TreeExplainer(rfc)
shap_values = explainer.shap_values(X_test_new)


# In[35]:


Erklärungen = pd.DataFrame()

for i in range(75):

    Werte = shap_values[1][6000+i,:].tolist()
    Erklärungen[i+1] = Werte
    
Erklärungen


# In[36]:


Erklärungen.to_csv('Erklärungen_SHAP_MANI2.csv')


# In[37]:


df = pd.read_csv('MANI3.csv',sep=';',decimal=',')
df = df.drop('ID',axis=1)
df.head()


# In[38]:


X = df.drop('default.payment.next.month',axis=1)
Y = df['default.payment.next.month']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,random_state = 1)


# In[39]:


from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators = 100,criterion = 'entropy',random_state = 0)
rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)


# In[40]:


Instanzen = pd.read_csv('Instanzen_MANI3.csv',sep=';',decimal=',')
Instanzen = Instanzen.drop('ID',axis=1)
X_Instanzen = Instanzen.drop('default.payment.next.month',axis=1)
Y_Instanzen = Instanzen['default.payment.next.month']


# In[41]:


X_test_new = X_test.append(X_Instanzen, ignore_index=True)


# In[42]:


y_test_new = y_test.append(Y_Instanzen, ignore_index=True)


# In[43]:


y_train.replace([0,1],['No default','Default'],inplace=True)
y_test.replace([0,1],['No default','Default'],inplace=True)


# In[44]:


import shap


# In[45]:


explainer = shap.TreeExplainer(rfc)
shap_values = explainer.shap_values(X_test_new)


# In[46]:


Erklärungen = pd.DataFrame()

for i in range(75):

    Werte = shap_values[1][6000+i,:].tolist()
    Erklärungen[i+1] = Werte
    
Erklärungen


# In[47]:


Erklärungen.to_csv('Erklärungen_SHAP_MANI3.csv')


# In[48]:


df = pd.read_csv('MANI4.csv',sep=';',decimal=',')
df = df.drop('ID',axis=1)
df.head()


# In[49]:


X = df.drop('default.payment.next.month',axis=1)
Y = df['default.payment.next.month']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,random_state = 1)


# In[50]:


from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators = 100,criterion = 'entropy',random_state = 0)
rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)


# In[51]:


Instanzen = pd.read_csv('Instanzen_MANI4.csv',sep=';',decimal=',')
Instanzen = Instanzen.drop('ID',axis=1)
X_Instanzen = Instanzen.drop('default.payment.next.month',axis=1)
Y_Instanzen = Instanzen['default.payment.next.month']


# In[52]:


X_test_new = X_test.append(X_Instanzen, ignore_index=True)


# In[53]:


y_test_new = y_test.append(Y_Instanzen, ignore_index=True)


# In[54]:


y_train.replace([0,1],['No default','Default'],inplace=True)
y_test.replace([0,1],['No default','Default'],inplace=True)


# In[55]:


import shap


# In[56]:


explainer = shap.TreeExplainer(rfc)
shap_values = explainer.shap_values(X_test_new)


# In[57]:


Erklärungen = pd.DataFrame()

for i in range(75):

    Werte = shap_values[1][6000+i,:].tolist()
    Erklärungen[i+1] = Werte
    
Erklärungen


# In[58]:


Erklärungen.to_csv('Erklärungen_SHAP_MANI4.csv')


# In[59]:


df = pd.read_csv('MANI5.csv',sep=';',decimal=',')
df = df.drop('ID',axis=1)
df.head()


# In[60]:


X = df.drop('default.payment.next.month',axis=1)
Y = df['default.payment.next.month']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,random_state = 1)


# In[61]:


from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators = 100,criterion = 'entropy',random_state = 0)
rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)


# In[62]:


Instanzen = pd.read_csv('Instanzen_MANI5.csv',sep=';',decimal=',')
Instanzen = Instanzen.drop('ID',axis=1)
X_Instanzen = Instanzen.drop('default.payment.next.month',axis=1)
Y_Instanzen = Instanzen['default.payment.next.month']


# In[63]:


X_test_new = X_test.append(X_Instanzen, ignore_index=True)


# In[64]:


y_test_new = y_test.append(Y_Instanzen, ignore_index=True)


# In[65]:


y_train.replace([0,1],['No default','Default'],inplace=True)
y_test.replace([0,1],['No default','Default'],inplace=True)


# In[66]:


import shap


# In[67]:


explainer = shap.TreeExplainer(rfc)
shap_values = explainer.shap_values(X_test_new)


# In[68]:


Erklärungen = pd.DataFrame()

for i in range(75):

    Werte = shap_values[1][6000+i,:].tolist()
    Erklärungen[i+1] = Werte
    
Erklärungen


# In[69]:


Erklärungen.to_csv('Erklärungen_SHAP_MANI5.csv')


# In[70]:


df = pd.read_csv('MANI6.csv',sep=';',decimal=',')
df = df.drop('ID',axis=1)
df.head()


# In[71]:


X = df.drop('default.payment.next.month',axis=1)
Y = df['default.payment.next.month']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.2,random_state = 1)


# In[72]:


from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators = 100,criterion = 'entropy',random_state = 0)
rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)


# In[73]:


Instanzen = pd.read_csv('Instanzen_MANI6.csv',sep=';',decimal=',')
Instanzen = Instanzen.drop('ID',axis=1)
X_Instanzen = Instanzen.drop('default.payment.next.month',axis=1)
Y_Instanzen = Instanzen['default.payment.next.month']


# In[74]:


X_test_new = X_test.append(X_Instanzen, ignore_index=True)


# In[75]:


y_test_new = y_test.append(Y_Instanzen, ignore_index=True)


# In[76]:


y_train.replace([0,1],['No default','Default'],inplace=True)
y_test.replace([0,1],['No default','Default'],inplace=True)


# In[77]:


import shap


# In[78]:


explainer = shap.TreeExplainer(rfc)
shap_values = explainer.shap_values(X_test_new)


# In[79]:


Erklärungen = pd.DataFrame()

for i in range(75):

    Werte = shap_values[1][6000+i,:].tolist()
    Erklärungen[i+1] = Werte
    
Erklärungen


# In[80]:


Erklärungen.to_csv('Erklärungen_SHAP_MANI6.csv')
